
Relatório – Algoritmo Híbrido de Ordenação com Bucket Sort

Estrutura Geral do Algoritmo

  O algoritmo funciona em duas etapas:

1. Distribuição em Buckets: os elementos são distribuídos em buckets com base em seu valor, proporcionalmente ao valor máximo da lista.
2. Ordenação Interna: cada bucket é ordenado utilizando um dos algoritmos escolhidos.

Depois de todos os buckets estarem ordenados, seus elementos são concatenados para formar o vetor final ordenado.

 Escolha do Tamanho dos Buckets

O número de buckets foi escolhido com base no número de elementos n do vetor. A regra utilizada foi:

    int num_buckets = (int) sqrt(n);

Essa decisão foi tomada pois a raiz quadrada de n tende a balancear bem a quantidade de elementos por bucket e o número de comparações totais, evitando que os buckets fiquem muito cheios (diminuindo a eficiência) ou muito vazios (aumentando o overhead).

  Algoritmos Utilizados nos Buckets

a) Quick Sort
Foi escolhido por sua eficiência média de O(n log n) e por geralmente ser rápido em práticas reais. Ele usa divisão e conquista e é in-place.

b) Heap Sort
Tem também complexidade O(n log n) em todos os casos, com desempenho estável e bom uso de memória. Foi usado para comparação com o Quick Sort, por não depender tanto da ordem inicial dos elementos.

c) Merge Sort
Utilizado por sua estabilidade e desempenho garantido em O(n log n), independentemente da distribuição dos dados. Embora utilize mais memória, é interessante para casos com grandes volumes de dados onde a previsibilidade de performance é desejada.

d) Insertion Sort (removido)
Foi inicialmente testado, mas removido nas versões finais por ser ineficiente com buckets grandes. Seu desempenho é aceitável apenas para vetores muito pequenos ou quase ordenados.

  Comparação de Desempenho

Com os testes realizados, foram obtidos os seguintes tempos médios de execução:

Algoritmo Interno    | 100.000 elementos | 1.000.000 elementos | 10.000.000 elementos
---------------------|-------------------|---------------------|-----------------------
Bucket + Quick       | 0.013 s           | 0.113 s             | 1.202 s
Bucket + Heap        | 0.018 s           | 0.192 s             | 2.832 s
Bucket + Merge       | 0.017 s           | 0.185 s             | 1.755 s


  Conclusão

O algoritmo híbrido de Bucket Sort mostrou-se eficiente, especialmente com Quick Sort e Merge Sort como algoritmos internos. A escolha do número de buckets como raiz quadrada de n proporcionou boa distribuição dos elementos, mantendo o desempenho do algoritmo em alta.

A abordagem mostrou que, mesmo com grandes volumes de dados, é possível obter desempenho satisfatório com a escolha correta dos algoritmos internos.
